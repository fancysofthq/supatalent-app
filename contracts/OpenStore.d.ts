/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OpenStoreInterface extends ethers.utils.Interface {
  functions: {
    "appFee(address)": FunctionFragment;
    "deleteListing(uint256)": FunctionFragment;
    "getListing(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "primaryListingId(tuple)": FunctionFragment;
    "promote(uint256)": FunctionFragment;
    "purchase(uint256,uint256)": FunctionFragment;
    "setAppFee(uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdraw(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "appFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleteListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "primaryListingId",
    values: [{ contrakt: string; id: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "promote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "appFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "promote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAppFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "List(uint256,address,address)": EventFragment;
    "Promote(uint256,address,uint256)": EventFragment;
    "Purchase(uint256,address,uint256,uint256,address,uint256,address,uint256,uint256)": EventFragment;
    "Replenish(uint256,uint256,uint256)": EventFragment;
    "SetAppFee(address,uint8)": EventFragment;
    "Withdraw(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "List"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Promote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Replenish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAppFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class OpenStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OpenStoreInterface;

  functions: {
    appFee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "appFee(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteListing(uint256)"(
      listingId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      listing: {
        token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        seller: string;
        app: string;
        price: BigNumber;
        stockSize: BigNumber;
        0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        1: string;
        2: string;
        3: BigNumber;
        4: BigNumber;
      };
      0: {
        token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        seller: string;
        app: string;
        price: BigNumber;
        stockSize: BigNumber;
        0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        1: string;
        2: string;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    "getListing(uint256)"(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      listing: {
        token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        seller: string;
        app: string;
        price: BigNumber;
        stockSize: BigNumber;
        0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        1: string;
        2: string;
        3: BigNumber;
        4: BigNumber;
      };
      0: {
        token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        seller: string;
        app: string;
        price: BigNumber;
        stockSize: BigNumber;
        0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
        1: string;
        2: string;
        3: BigNumber;
        4: BigNumber;
      };
    }>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    primaryListingId(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "primaryListingId(tuple)"(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    promote(
      listingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "promote(uint256)"(
      listingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    purchase(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchase(uint256,uint256)"(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setAppFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAppFee(uint8)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    withdraw(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,uint256)"(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  appFee(arg0: string, overrides?: CallOverrides): Promise<number>;

  "appFee(address)"(arg0: string, overrides?: CallOverrides): Promise<number>;

  deleteListing(
    listingId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteListing(uint256)"(
    listingId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getListing(
    listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
    seller: string;
    app: string;
    price: BigNumber;
    stockSize: BigNumber;
    0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
  }>;

  "getListing(uint256)"(
    listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
    seller: string;
    app: string;
    price: BigNumber;
    stockSize: BigNumber;
    0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
  }>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    tokenIds: BigNumberish[],
    tokenValues: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    operator: string,
    from: string,
    tokenIds: BigNumberish[],
    tokenValues: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    tokenValue: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    tokenValue: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  primaryListingId(
    token: { contrakt: string; id: BigNumberish },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "primaryListingId(tuple)"(
    token: { contrakt: string; id: BigNumberish },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  promote(
    listingId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "promote(uint256)"(
    listingId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  purchase(
    listingId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchase(uint256,uint256)"(
    listingId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setAppFee(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAppFee(uint8)"(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    listingId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,uint256)"(
    listingId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    appFee(arg0: string, overrides?: CallOverrides): Promise<number>;

    "appFee(address)"(arg0: string, overrides?: CallOverrides): Promise<number>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteListing(uint256)"(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
      seller: string;
      app: string;
      price: BigNumber;
      stockSize: BigNumber;
      0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
    }>;

    "getListing(uint256)"(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      token: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
      seller: string;
      app: string;
      price: BigNumber;
      stockSize: BigNumber;
      0: { contrakt: string; id: BigNumber; 0: string; 1: BigNumber };
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
    }>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    primaryListingId(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "primaryListingId(tuple)"(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    promote(listingId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "promote(uint256)"(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    purchase(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchase(uint256,uint256)"(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAppFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setAppFee(uint8)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address,uint256)"(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    List(
      listingId: BigNumberish | null,
      seller: string | null,
      appAddress: string | null
    ): EventFilter;

    Promote(
      listingId: BigNumberish | null,
      appAddress: string | null,
      appFee: null
    ): EventFilter;

    Purchase(
      listingId: BigNumberish | null,
      buyer: string | null,
      tokenAmount: null,
      income: null,
      royaltyAddress: null,
      royaltyValue: null,
      appAddress: string | null,
      appFee: null,
      profit: null
    ): EventFilter;

    Replenish(
      listingId: BigNumberish | null,
      newPrice: null,
      tokenAmount: null
    ): EventFilter;

    SetAppFee(app: string | null, fee: null): EventFilter;

    Withdraw(
      listingId: BigNumberish | null,
      to: null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    appFee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "appFee(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteListing(uint256)"(
      listingId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getListing(uint256)"(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    primaryListingId(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "primaryListingId(tuple)"(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    promote(
      listingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "promote(uint256)"(
      listingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    purchase(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchase(uint256,uint256)"(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setAppFee(fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setAppFee(uint8)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address,uint256)"(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    appFee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "appFee(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteListing(
      listingId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteListing(uint256)"(
      listingId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getListing(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getListing(uint256)"(
      listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      tokenIds: BigNumberish[],
      tokenValues: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      tokenValue: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    primaryListingId(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "primaryListingId(tuple)"(
      token: { contrakt: string; id: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    promote(
      listingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "promote(uint256)"(
      listingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchase(uint256,uint256)"(
      listingId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setAppFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAppFee(uint8)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,uint256)"(
      listingId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
